# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# Automated-workflow, .ci/complete_the_following_set-up_steps:
#
# 1. .ci/create_sagemaker_and_ECR_repository_to_store_images.
#    (For example: `aws ecr create-repository -repository-name lifewriter-app-sagemaker-repo-+-repository-name lifewriter-app-ecr-repo --region us-east-2)`.
#    actions: auto-replace the value of `ECR_REPOSITORY` in the workflow below with this repository's name.
#    actions: auto-replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. .ci/using_IAM-policy-generator_create_an_ECS_task_definition,_an_ECS_cluster_and_an_ECS_service_in_Sagemaker_linux2-deeplearning_AMI.
#    (For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with lifewriter-app service and cluster names).
#
# 3. .ci/auto-store_sagemaker-ECS_task_definition_as_a_JSON_file_in_your_repository_
#    _format_should_follow_the_output_of 'aws_ecs_register-task-definition;then--generate-cli-skeleton`.
#    .ci/replace_the_value_of `task-definition` in_the_workflow_below_with_your_JSON_file_name.
#    .ci/replace_the_value_of_ `container-name`_in_the_workflow_below_with_the_name_of_the_container_
#    in_the_`containerDefinitions'_section_of_the_task_definition.
#
# 4. .ci/store_IAM_user_access_key_in_GitHub_Actions_secrets_named_`AWS_ACCESS_KEY_ID`_and_`AWS_SECRET_ACCESS_KEY`.
#    (See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials).

on:
  release:
    types: [created]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: sagemaker-linux2-deeplearning-AMI-T2nano

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: sample-app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: sample-app-service
        cluster: default
        wait-for-service-stability: true
