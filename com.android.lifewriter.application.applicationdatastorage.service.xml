<?xml version="1.0" encoding="utf-8"?>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../../css/themes/default/theme-default.min.css"/>
	<link rel="stylesheet" href="../../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../../css/docs-default.css"/>
	<script src="../../js/energize-min.js"></script>
	<script src="../../js/jquery-1.8.1.min.js"></script>
	<script src="../../../app.js"></script>
	<script src="../../js/common.js"></script>
	<script src="../../js/example.js"></script>
	<script src="../../js/jquery.mobile-1.2.0.min.js"></script>
	
	<link href="../css/docs.css" rel="stylesheet" type="text/css"/>
	<link href="../css/mathml.css" rel="stylesheet" type="text/css"/>
	<script src="../../js/bookmarks.js"></script>
	
	<script> function jsxref(a,b,c,d,e) { document.write("<b>"+b+"</b>"); }</script>
	<script> function Note(s) { document.write("Note: "+s); }</script>
	<script> function anch(s) { document.write(s); }</script>
</head>
 
<body>

<div data-role="page" data-theme="a" data-ajax="false">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Back</a> <h1>super</h1>
	</div><!-- /header -->

	<div data-role="content">
		<div><script>harmony</script> <h2>super</h2></div>

<p>The <strong>super</strong> keyword is used to call functions on an object's parent.</p>

<p>The <code>super.prop</code> and <code>super[expr]</code> expressions are valid in any method definition in both classes and object literals.</p>

<h2 id="Syntax">Syntax</h2>

<pre class="syntaxbox">super([arguments]); // calls the parent constructor.
super.functionOnParent([arguments]);
</pre>

<h2 id="Description">Description</h2>

<p>When used in a constructor, the <code>super</code> keyword appears alone and must be used before the <code>this</code> keyword can be used. This keyword can also be used to call functions on a parent object.</p>

<h2 id="Example">Example</h2>

<h3 id="Using_super_in_classes">Using <code>super</code> in classes</h3>

<p>This code snippet is taken from the classes sample (live demo).</p>

<pre class="brush: js">class Polygon {
  constructor(height, width) {
    this.name = 'Polygon';
    this.height = height;
    this.width = width;
  }
  sayName() {
    console.log('Hi, I am a ', this.name + '.');
  }
}

class Square extends Polygon {
  constructor(length) {
    this.height; // ReferenceError, super needs to be called first!
    
    // Here, it calls the parent class' constructor with lengths
    // provided for the Polygon's width and height
    super(length, length);
    
    // Note: In derived classes, super() must be called before you
    // can use 'this'. Leaving this out will cause a reference error.
    this.name = 'Square';
  }

  get area() {
    return this.height * this.width;
  }

  set area(value) {
    this.area = value;
  } 
}</pre>

<h3 id="Super-calling_static_methods">Super-calling static methods</h3>

<p>You are also able to call super on static methods.</p>

<pre class="brush: js">class Human {
  constructor() {}
  static ping() {
    return 'ping';
  }
}

class Computer extends Human {
  constructor() {}
  static pingpong() {
    return super.ping() + ' pong';
  }
}
Computer.pingpong(); // 'ping pong'
</pre>

<h3 id="Deleting_super_properties_will_throw">Deleting super properties will throw</h3>

<p>You can not use the delete operator and <code>super.prop</code> or <code>super[expr]</code> to delete a parent class' property, it will throw a <b>ReferenceError</b>.</p>

<pre class="brush: js">class Base {
  constructor() {}
  foo() {}
}
class Derived {
  constructor() {}
  delete() {
    delete super.foo;
  }
}

new Derived().delete(); // ReferenceError: invalid delete involving 'super'. </pre>

<h3 id="Super.prop_can_not_overwrite_non-writable_properties"><code>Super.prop</code> can not overwrite non-writable properties</h3>

<p>When defining non-writable properties with e.g. <b>Object.defineProperty</b>, <code>super</code> can not overwrite the value of the property.</p>

<pre class="brush: js">class X {
  constructor() {
    Object.defineProperty(this, "prop", {
      configurable: true,
      writable: false, 
      value: 1
    });
  } 
  f() { 
    super.prop = 2;
  }
}

var x = new X();
x.f();
console.log(x.prop); // 1
</pre>

<h3 id="Using_super.prop_in_object_literals">Using <code>super.prop</code> in object literals</h3>

<p>Super can also be used in the object initializer / literal notation. In this example, two objects define a method. In the second object, <code>super</code> calls the first object's method. This works with the help of <b>Object.setPrototypeOf()</b> with which we are able to set the prototype of <code>obj2</code> to <code>obj1</code>, so that <code>super</code> is able to find <code>method1</code> on <code>obj1</code>.</p>

<pre class="brush: js">var obj1 = {
  method1() {
    console.log("method 1");
  }
}

var obj2 = {
  method2() {
   super.method1();
  }
}

Object.setPrototypeOf(obj2, obj1);
obj2.method2(); // logs "method 1"
</pre>







<p></p>





<
<!DOCTYPE html>
<html>

<head>
	<title>Saving Data</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-dark.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="../css/themes/prism/dark.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-dark.min.css"/>

	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
		<h1>Saving Data</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="setTheme(getTheme() == 'default' ? 'dark' : 'default')"></a>
	</div>

	<div style="position:fixed; top:40px; width:100%; text-align:center; z-index:1101;">
		<div id="appPopup" class="androidPopup">Hello World</div>
	</div>

	<div data-role="content">

		<div class="samp samp-inline" style="font-size:revert; padding:10px 15px">
		<b>Content:</b><br>
		<span style="display:inline-block;padding-left:1em;">
			• <a href="" onclick="jumpTo('Save data during one session')">Save data during one session</a><br>
			• <a href="" onclick="jumpTo('Save data across multiple app starts')">Save data across multiple app starts</a><br>
			• <a href="" onclick="jumpTo('Using Databases')">Using Databases</a><br>
		</span><br>
		</div>

		<p>In many cases you need to store user specific data like app settings on the users device.<br>
		DroidScript provides some functions which makes it easier to handle this.<br>
		<grey>Note: All explained methods are listed in the <a href="../app_Database.htm" data-ajax="false">Database</a> section.</grey></p>
		<h2>Save data during one session</h2>
		<p>Some settings are just meaningful in a current running program.<br>
		For example if you keep track of the current app state (opened tabs, documents, pages).<br>
		For this purpose you can use the <strong>app.<a href="../app/SetData.htm" data-ajax="false">SetData</a></strong> and the <strong>app.<a href="../app/GetData.htm" data-ajax="false">GetData</a></strong> method.<br>
		To clear stored data use <strong>app.<a href="../app/ClearData.htm" data-ajax="false">ClearData</a></strong>.</p>
		<h2>Save data across multiple app starts</h2>
		<p>Many apps support in-app settings which will be loaded after each app start. The app object has several methods to save and load different types of data.<br>
		To clear a saved value use the <strong>app.<a href="../app/ClearValue.htm" data-ajax="false">ClearValue</a></strong> method.</p>
        <table>
            <tr>
                <th width="10%">Save</th>
                <td width="15%"><a href="../app/SaveBoolean.htm" data-ajax="false">SaveBoolean</a></td>
                <td width="15%"><a href="../app/SaveNumber.htm" data-ajax="false">SaveNumber</a></td>
                <td width="15%"><a href="../app/SaveText.htm" data-ajax="false">SaveText</a></td>
            </tr>
            <tr>
                <th>Load</th>
                <td><a href="../app/LoadBoolean.htm" data-ajax="false">LoadBoolean</a></td>
                <td><a href="../app/LoadNumber.htm" data-ajax="false">LoadNumber</a></td>
                <td><a href="../app/LoadText.htm" data-ajax="false">LoadText</a></td>
            </tr>
            <tr>
                <th>Type</th>
                <td>Boolean</td>
                <td>Number</td>
                <td>String</td>
            </tr>
        </table>
		<p>If you have many properties to save you can use an object structure instead of saving each value on their own.<br>
		Load settings: <span class="samp samp-inline"><span class="token keyword">var</span> conf <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> app<span class="token punctuation">.</span><span class="token function">LoadText</span><span class="token punctuation">(</span> <span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token string">"{}"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
		Save settings: <span class="samp samp-inline">app<span class="token punctuation">.</span><span class="token function">SaveText</span><span class="token punctuation">(</span> <span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> conf <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - App Settings</h3>
			<div id="examp1" style="font-size:70%">
				<b id="snip1" style="font-size:100%"><span class="token comment">// default settings</span><br>
				<span class="token keyword">var</span> settings <span class="token operator">=</span> <span class="token punctuation">{</span> version<span class="token punctuation">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> startNo<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">LoadSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span style="display:inline-block"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">LoadText</span><span class="token punctuation">(</span> <span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token string">"{}"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
				    <br>
				    <span style="display:inline-block"><span class="token comment">// update settings object</span></span><br>
				    <span style="display:inline-block"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">)</span> settings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">SaveSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span style="display:inline-block">app<span class="token punctuation">.</span><span class="token function">SaveText</span><span class="token punctuation">(</span> <span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
				<span class="token punctuation">}</span></b><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span style="display:inline-block"><span class="token function">LoadSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
				    <span style="display:inline-block">settings<span class="token punctuation">.</span>startNo<span class="token operator">++</span><span class="token punctuation">;</span></span><br>
				    <span style="display:inline-block">app<span class="token punctuation">.</span><span class="token function">ShowPopup</span><span class="token punctuation">(</span><span class="token string">"Started "</span> <span class="token operator">+</span> settings<span class="token punctuation">.</span>startNo <span class="token operator">+</span> <span class="token string">". time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
				    <span style="display:inline-block"><span class="token function">SaveSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip1 )">    Copy    </a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp1 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp1 )">      Run      </a>
			</div>
		</div>

		<h2>Using Databases</h2>
		<p>Using Databases is the most elaborate variant of the three.<br>
		<br>
		<red>You should only consider using one if you have to perform complex queries on a large amount of datasets.</red><br>
		Using JSON objects is more practicable and performant in most cases.<br>
		<br>
		DroidScript provides an extra <a href="../app/OpenDatabase.htm" data-ajax="false">OpenDatabase</a> component for databases which uses the SQLitePlugin <a href="https://github.com/xpbrew/cordova-sqlite-storage" onclick="return OpenUrl(this.href);">cordova-sqlite-storage</a>.<br>
		<br>
		For a demo Have a look at the <a href="" onclick="OpenSample(&quot;Database&quot;)">Database</a> example.</p>

	</div>


</div>
</body>

</html>


<head>
	<title>Files</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="css/themes/default/theme-dark.min.css"/>
	<link rel="stylesheet" href="css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="css/themes/prism/dark.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="css/docs-dark.min.css"/>

	<script src="js/energize-min.js"></script>
	<script src="js/jquery-1.8.1.min.js"></script>
	<script src="../app.js"></script>
	<script src="js/common.js"></script>
	<script src="js/example.js"></script>
	<script src="js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a" data-ajax="false" data-add-back-btn="true">

	<div data-role="header" data-position="fixed">
		<a href="#" class="ui-btn-left" data-icon="arrow-l" onclick="history.back(); return false">Back</a>
		<h1>Files</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="setTheme(getTheme() == 'default' ? 'dark' : 'default')"></a>
	</div><!-- /header -->

	<div data-role="content">
		<ul data-role="listview" data-inset="true" data-filter="true">
		
			<li><a href="app/FileExists.htm">FileExists</a></li>
			<li><a href="app/ReadFile.htm">ReadFile</a></li>
			<li><a href="app/WriteFile.htm">WriteFile</a></li>
			<li><a href="app/ReplaceInFile.htm">ReplaceInFile</a></li>
			<li><a href="app/CopyFile.htm">CopyFile</a></li>
			<li><a href="app/RenameFile.htm">RenameFile</a></li>
			<li><a href="app/DeleteFile.htm">DeleteFile</a></li>
			<li><a href="app/ZipFile.htm">ZipFile</a></li>
			<li><a href="app/UnzipFile.htm">UnzipFile</a></li><li></li>
			<li><a href="app/GetFileDate.htm">GetFileDate</a></li>
			<li><a href="app/GetFileSize.htm">GetFileSize</a></li>
			<li><a href="app/GetMetadata.htm">GetMetadata</a></li>
			<li><a href="app/CreateFile.htm">CreateFile</a></li><li></li>
			<li><a href="app/FolderExists.htm">FolderExists</a></li>
			<li><a href="app/IsFolder.htm">IsFolder</a></li>
			<li><a href="app/MakeFolder.htm">MakeFolder</a></li>
			<li><a href="app/ListFolder.htm">ListFolder</a></li>
			<li><a href="app/CopyFolder.htm">CopyFolder</a></li>
			<li><a href="app/RenameFolder.htm">RenameFolder</a></li>
			<li><a href="app/DeleteFolder.htm">DeleteFolder</a></li>
			<li><a href="app/ZipFolder.htm">ZipFolder</a></li><li></li>
			<li><a href="app/GetMediaFile.htm">GetMediaFile</a></li>
			<li><a href="app/GetExternalFolder.htm">GetExternalFolder</a></li>
			<li><a href="app/GetInternalFolder.htm">GetInternalFolder</a></li>
			<li><a href="app/GetPrivateFolder.htm">GetPrivateFolder</a></li>
			<li><a href="app/GetSpecialFolder.htm">GetSpecialFolder</a></li><li></li>
			<li><a href="app/ChooseFile.htm">ChooseFile</a></li>
			<li><a href="app/ChooseImage.htm">ChooseImage</a></li>
			<li><a href="app/GetThumbnail.htm">GetThumbnail</a></li>
			<li><a href="app/OpenFile.htm">OpenFile</a></li>
			<li><a href="app/ScanFile.htm">ScanFile</a></li>
			<li><a href="app/SendFile.htm">SendFile</a></li><li></li>
			<li><a href="app/CreateZipUtil.htm">CreateZipUtil</a></li>
			<li><a href="app/ExtractAssets.htm">ExtractAssets</a></li>
			<li><a href="app/ExtractPlugins.htm">ExtractPlugins</a></li>
			<li><a href="app/GetResourceId.htm">GetResourceId</a></li>
			<li><a href="app/Uri2Path.htm">Uri2Path</a></li>
		</ul>
	</div><!-- /content -->
</div><!-- /page -->
</body>
</html>



 
		<br>
		<p class="lic">&nbsp;<a class="lic" id="extLink" href="http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference" target="_blank" data-role="none">
		Created by Mozilla Contributors</a>, license: <a class="lic" id="extLink" href="http://creativecommons.org/licenses/by-sa/2.5" target="_blank" data-role="none">CC-BY-SA 2.5</a>
		</p>
	</div>
</div>

</body>
</html>
 
